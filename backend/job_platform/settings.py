"""
Django settings for job_platform project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta # 需要 import timedelta
from typing import Any


def monkeypatch_ninja_uuid_converter() -> None:
    """
    Monkeypatch to fix Django-Ninja UUID converter warning.
    Reference: https://github.com/vitalik/django-ninja/issues/1266
    """
    import importlib
    import sys

    import django.urls

    module_name = "ninja.signature.utils"
    sys.modules.pop(module_name, None)

    original_register_converter = django.urls.register_converter

    def fake_register_converter(*_: Any, **__: Any) -> None:
        pass

    django.urls.register_converter = fake_register_converter
    importlib.import_module(module_name)

    django.urls.register_converter = original_register_converter


# 執行 monkeypatch 來解決 Django-Ninja UUID converter 警告
monkeypatch_ninja_uuid_converter()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#df8_cboq=a083mza$o0g!ua0-4m5nxh!3uyf-^_-b-_bk82pf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jobs', # 新增 jobs app
    'ninja', # 新增 ninja
    'ninja_jwt', # 新增 ninja_jwt (如果需要認證)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'job_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'job_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Taipei' # 或者其他你選擇的時區

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Ninja JWT settings (如果需要 JWT 認證)
NINJA_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # 訪問令牌有效期，例如60分鐘
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # 刷新令牌有效期，例如1天
    'ROTATE_REFRESH_TOKENS': True,                 # 每次刷新時都頒發新的刷新令牌
    'BLACKLIST_AFTER_ROTATION': True,              # 將舊的刷新令牌列入黑名單
    'UPDATE_LAST_LOGIN': True,                     # 更新用戶的 last_login 字段

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # 使用 Django 的 SECRET_KEY
    # 'VERIFYING_KEY': None, # 通常與 SIGNING_KEY 相同或從其派生
    # 'AUDIENCE': None,
    # 'ISSUER': None,

    'USER_ID_FIELD': 'id', # 用於標識用戶的模型字段
    'USER_ID_CLAIM': 'user_id', # JWT 中用戶 ID 的聲明名稱

    'AUTH_TOKEN_CLASSES': ('ninja_jwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type', # JWT 中令牌類型的聲明名稱

    'JTI_CLAIM': 'jti', # JWT ID 的聲明名稱

    # 'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    # 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    # 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    
    # 確保 settings.py 中有 AUTH_USER_MODEL (如果不是預設的 User)
    # 'USER_AUTHENTICATION_RULE': 'ninja_jwt.authentication.default_user_authentication_rule',
}

# 在檔案底部添加日誌配置

LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'formatters': {
    'verbose': {
      'format': '{levelname} {asctime} {module} {message}',
      'style': '{',
    },
    'simple': {
      'format': '{levelname} {message}',
      'style': '{',
    },
  },
  'handlers': {
    'console': {
      'level': 'DEBUG',
      'class': 'logging.StreamHandler',
      'formatter': 'verbose',
    },
    'file': {
      'level': 'DEBUG',
      'class': 'logging.FileHandler',
      'filename': 'debug.log',
      'formatter': 'verbose',
    },
  },
  'loggers': {
    'jobs': {
      'handlers': ['console', 'file'],
      'level': 'DEBUG',
      'propagate': True,
    },
  },
  'root': {
    'handlers': ['console'],
    'level': 'WARNING',
  },
}
